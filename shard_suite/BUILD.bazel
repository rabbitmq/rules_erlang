load(
    "//:erlang_app.bzl",
    "DEFAULT_TEST_ERLC_OPTS",
    "erlang_app",
)
load("//:xref.bzl", "xref")
load("//:dialyze.bzl", "DEFAULT_PLT_APPS", "dialyze", "plt")
load("//:ct.bzl", "ct_suite")
load("//:erl_eval.bzl", "erl_eval")

APP_NAME = "shard_suite"

APP_VERSION = "1.0.0"

erlang_app(
    app_name = APP_NAME,
    app_version = APP_VERSION,
    test_erlc_opts = DEFAULT_TEST_ERLC_OPTS + [
        "+nowarn_export_all",
    ],
)

xref()

plt(
    name = "base_plt",
    apps = DEFAULT_PLT_APPS + [
        "crypto",
    ],
)

dialyze(
    plt = ":base_plt",
)

ct_suite(
    name = "shard_suite_SUITE",
    size = "small",
    additional_srcs = [
        "test/example_suite.erl",
    ],
)

erl_eval(
    name = "escript",
    srcs = [
        "src/shard_suite.erl",
    ],
    outs = [
        "escript/shard_suite",
    ],
    expression = """
io:format("Assembiling shard_suite escript...~n", []),
{ok, [[Src]]} = init:get_argument(srcs),
{ok, [[Dest]]} = init:get_argument(outs),
ok = escript:create(Dest,
                    [shebang, comment, {emu_args, "-sname shard_suite"},
                     {source, Src}]),
io:format("done.~n", []),
halt().
""",
    visibility = ["//visibility:public"],
)
