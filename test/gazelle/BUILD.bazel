load("@bazel_gazelle//:def.bzl", "gazelle_binary")
load("@io_bazel_rules_go//go:def.bzl", "go_test")

gazelle_binary(
    name = "gazelle_erlang_binary",
    testonly = True,
    languages = ["@rules_erlang//gazelle"],
    tags = ["manual"],
)

go_test(
    name = "integration_suite",
    srcs = ["integration_test.go"],
    data = [
        ":gazelle_erlang_binary",
        "@rules_erlang//gazelle:dot_app_to_json",
        "@rules_erlang//gazelle/erl_attrs_to_json:erl_attrs_to_json",
        "@rules_erlang//gazelle:hex_metadata_config_to_json",
        "@rules_erlang//gazelle:rebar_config_to_json",
    ] + glob(["testdata/**"]),
    tags = ["manual"],
    deps = [
        "@bazel_gazelle//testtools:go_default_library",
        "@com_github_emirpasic_gods//lists/singlylinkedlist",
        "@com_github_ghodss_yaml//:yaml",
        "@io_bazel_rules_go//go/tools/bazel:go_default_library",
    ],
)

go_test(
    name = "fetch_test",
    srcs = ["fetch_test.go"],
    tags = ["manual"],
    deps = [
        "@com_github_onsi_ginkgo_v2//:go_default_library",
        "@com_github_onsi_gomega//:go_default_library",
        "@rules_erlang//gazelle/fetch",
    ],
)

go_test(
    name = "mutable_set_test",
    srcs = ["mutable_set_test.go"],
    tags = ["manual"],
    deps = [
        "@com_github_onsi_ginkgo_v2//:go_default_library",
        "@com_github_onsi_gomega//:go_default_library",
        "@rules_erlang//gazelle/mutable_set",
    ],
)

go_test(
    name = "erlang_test",
    srcs = [
        "erlang_test.go",
        "fake_erl_parser.go",
        "mutable_set_matchers.go",
    ],
    tags = ["manual"],
    deps = [
        "@bazel_gazelle//config:go_default_library",
        "@bazel_gazelle//language:go_default_library",
        "@bazel_gazelle//rule:go_default_library",
        "@com_github_bazelbuild_buildtools//build:go_default_library",
        "@com_github_onsi_ginkgo_v2//:go_default_library",
        "@com_github_onsi_gomega//:go_default_library",
        "@com_github_onsi_gomega//types:go_default_library",
        "@rules_erlang//gazelle",
        "@rules_erlang//gazelle/mutable_set",
    ],
)

test_suite(
    name = "unit_suite",
    tags = ["manual"],
    tests = [
        "erlang_test",
        "fetch_test",
        "mutable_set_test",
    ],
)

test_suite(
    name = "all_suites",
    tags = ["manual"],
    tests = [
        "integration_suite",
        "unit_suite",
    ],
)

# convenience for parsing an actual file somewhere
# `bazel run //gazelle:erl_attrs_to_json -- /path/to/file.erl`
genrule(
    name = "erl_attrs_to_json",
    outs = ["erl_attrs_to_json_wrapper.sh"],
    cmd = """\
cat << 'EOF' > $@
jq -nc '{"path":"'$$1'","macros":{},"includes":["'$$(dirname $$1)'"]}' \
    | $(location @rules_erlang//gazelle/erl_attrs_to_json:erl_attrs_to_json) \
    | jq
EOF
""",
    executable = True,
    tools = [
        "@rules_erlang//gazelle/erl_attrs_to_json:erl_attrs_to_json",
    ],
)
