load("@rules_erlang//:erlang_bytecode2.bzl", "erlang_bytecode", "erlc_opts")
load("@rules_erlang//:erlang_app.bzl", "erlang_app")
load("@rules_erlang//:xref2.bzl", "xref")
load("@rules_erlang//:dialyze.bzl", "dialyze", "plt")
load("@rules_erlang//:ct.bzl", "assert_suites2")

# gazelle:erlang_erlc_opt -DBUILD_WITHOUT_FOO
# gazelle:erlang_resolve other_lib @foo_proj//apps/other_lib:erlang_app

genrule(
    name = "generate_hrl",
    srcs = [],
    outs = ["include/own_header_include_lib.hrl"],
    cmd = """\
echo "-define(WHY, who_knows)." > $@
""",
)

erlc_opts(
    name = "erlc_opts",
    values = select({
        "@rules_erlang//:debug_build": [
            "+debug_info",
            "-DBUILD_WITHOUT_FOO",
        ],
        "//conditions:default": [
            "+debug_info",
            "+deterministic",
            "-DBUILD_WITHOUT_FOO",
        ],
    }),
    visibility = [":__subpackages__"],
)

erlc_opts(
    name = "test_erlc_opts",
    values = select({
        "@rules_erlang//:debug_build": [
            "+debug_info",
            "-DBUILD_WITHOUT_FOO",
            "-DTEST=1",
        ],
        "//conditions:default": [
            "+debug_info",
            "+deterministic",
            "-DBUILD_WITHOUT_FOO",
            "-DTEST=1",
        ],
    }),
    visibility = [":__subpackages__"],
)

plt(
    name = "base_plt",
    visibility = [":__subpackages__"],
)

erlang_bytecode(
    name = "ebin_own_header_include_lib_beam",
    testonly = True,
    srcs = ["src/own_header_include_lib.erl"],
    outs = ["ebin/own_header_include_lib.beam"],
    hdrs = ["include/own_header_include_lib.hrl"],
    app_name = "own_header_include_lib",
    erlc_opts = "//:erlc_opts",
    deps = ["@foo_proj//apps/other_lib:erlang_app"],
)

filegroup(
    name = "beam_files",
    testonly = True,
    srcs = ["ebin/own_header_include_lib.beam"],
)

filegroup(
    name = "srcs",
    testonly = True,
    srcs = [
        "src/own_header_include_lib.app.src",
        "src/own_header_include_lib.erl",
    ],
)

filegroup(
    name = "private_hdrs",
    testonly = True,
)

filegroup(
    name = "public_hdrs",
    testonly = True,
    srcs = [
        "include/own_header_include_lib.hrl",
    ],
)

filegroup(
    name = "priv",
    testonly = True,
)

filegroup(
    name = "license_files",
    testonly = True,
)

filegroup(
    name = "public_and_private_hdrs",
    testonly = True,
    srcs = [
        ":private_hdrs",
        ":public_hdrs",
    ],
)

filegroup(
    name = "all_srcs",
    testonly = True,
    srcs = [
        ":public_and_private_hdrs",
        ":srcs",
    ],
)

erlang_app(
    name = "erlang_app",
    testonly = True,
    srcs = [":all_srcs"],
    hdrs = [":public_hdrs"],
    app_name = "own_header_include_lib",
    beam_files = [":beam_files"],
    license_files = [":license_files"],
    priv = [":priv"],
    deps = ["@foo_proj//apps/other_lib:erlang_app"],
)

alias(
    name = "own_header_include_lib",
    actual = ":erlang_app",
    visibility = ["//visibility:public"],
)

xref(
    name = "xref",
    target = ":erlang_app",
)

plt(
    name = "deps_plt",
    for_target = ":erlang_app",
    plt = "//:base_plt",
)

dialyze(
    name = "dialyze",
    plt = ":deps_plt",
    target = ":erlang_app",
)

assert_suites2()
