load("@rules_erlang//:erlang_bytecode2.bzl", "erlang_bytecode", "erlc_opts")
load("@rules_erlang//:erlang_app.bzl", "erlang_app", "test_erlang_app")
load("@rules_erlang//:xref2.bzl", "xref")
load("@rules_erlang//:dialyze.bzl", "dialyze", "plt")
load("@rules_erlang//:eunit2.bzl", "eunit")
load("@rules_erlang//:ct.bzl", "assert_suites2")

erlc_opts(
    name = "erlc_opts",
    values = select({
        "@rules_erlang//:debug_build": [
            "+debug_info",
            "+recv_opt_info",
            "+warn_export_vars",
            "+warn_obsolete_guard",
            "+warn_shadow_vars",
        ],
        "//conditions:default": [
            "+debug_info",
            "+deterministic",
            "+recv_opt_info",
            "+warn_export_vars",
            "+warn_obsolete_guard",
            "+warn_shadow_vars",
        ],
    }),
    visibility = [":__subpackages__"],
)

erlc_opts(
    name = "test_erlc_opts",
    values = select({
        "@rules_erlang//:debug_build": [
            "+debug_info",
            "-DTEST=1",
        ],
        "//conditions:default": [
            "+debug_info",
            "+deterministic",
            "-DTEST=1",
        ],
    }),
    visibility = [":__subpackages__"],
)

plt(
    name = "base_plt",
    visibility = [":__subpackages__"],
)

erlang_bytecode(
    name = "ebin_seshat_beam",
    srcs = ["src/seshat.erl"],
    outs = ["ebin/seshat.beam"],
    app_name = "seshat",
    erlc_opts = "//:erlc_opts",
)

erlang_bytecode(
    name = "test_seshat_beam",
    testonly = True,
    srcs = ["src/seshat.erl"],
    outs = ["test/seshat.beam"],
    app_name = "seshat",
    erlc_opts = "//:test_erlc_opts",
)

erlang_bytecode(
    name = "ebin_seshat_app_beam",
    srcs = ["src/seshat_app.erl"],
    outs = ["ebin/seshat_app.beam"],
    app_name = "seshat",
    erlc_opts = "//:erlc_opts",
)

erlang_bytecode(
    name = "test_seshat_app_beam",
    testonly = True,
    srcs = ["src/seshat_app.erl"],
    outs = ["test/seshat_app.beam"],
    app_name = "seshat",
    erlc_opts = "//:test_erlc_opts",
)

erlang_bytecode(
    name = "ebin_seshat_counters_server_beam",
    srcs = ["src/seshat_counters_server.erl"],
    outs = ["ebin/seshat_counters_server.beam"],
    app_name = "seshat",
    erlc_opts = "//:erlc_opts",
)

erlang_bytecode(
    name = "test_seshat_counters_server_beam",
    testonly = True,
    srcs = ["src/seshat_counters_server.erl"],
    outs = ["test/seshat_counters_server.beam"],
    app_name = "seshat",
    erlc_opts = "//:test_erlc_opts",
)

erlang_bytecode(
    name = "ebin_seshat_sup_beam",
    srcs = ["src/seshat_sup.erl"],
    outs = ["ebin/seshat_sup.beam"],
    app_name = "seshat",
    erlc_opts = "//:erlc_opts",
)

erlang_bytecode(
    name = "test_seshat_sup_beam",
    testonly = True,
    srcs = ["src/seshat_sup.erl"],
    outs = ["test/seshat_sup.beam"],
    app_name = "seshat",
    erlc_opts = "//:test_erlc_opts",
)

filegroup(
    name = "beam_files",
    srcs = [
        "ebin/seshat.beam",
        "ebin/seshat_app.beam",
        "ebin/seshat_counters_server.beam",
        "ebin/seshat_sup.beam",
    ],
)

filegroup(
    name = "test_beam_files",
    testonly = True,
    srcs = [
        "test/seshat.beam",
        "test/seshat_app.beam",
        "test/seshat_counters_server.beam",
        "test/seshat_sup.beam",
    ],
)

erlang_bytecode(
    name = "test_seshat_counters_server_test_beam",
    testonly = True,
    srcs = ["test/seshat_counters_server_test.erl"],
    outs = ["test/seshat_counters_server_test.beam"],
    erlc_opts = "//:test_erlc_opts",
)

erlang_bytecode(
    name = "test_seshat_test_beam",
    testonly = True,
    srcs = ["test/seshat_test.erl"],
    outs = ["test/seshat_test.beam"],
    erlc_opts = "//:test_erlc_opts",
)

filegroup(
    name = "srcs",
    srcs = [
        "src/seshat.app.src",
        "src/seshat.erl",
        "src/seshat_app.erl",
        "src/seshat_counters_server.erl",
        "src/seshat_sup.erl",
    ],
)

filegroup(name = "private_hdrs")

filegroup(name = "public_hdrs")

filegroup(name = "priv")

filegroup(
    name = "license_files",
    srcs = [
        "LICENSE",
        "LICENSE-APACHE2",
        "LICENSE-MPL-RabbitMQ",
    ],
)

filegroup(
    name = "public_and_private_hdrs",
    srcs = [
        ":private_hdrs",
        ":public_hdrs",
    ],
)

filegroup(
    name = "all_srcs",
    srcs = [
        ":public_and_private_hdrs",
        ":srcs",
    ],
)

erlang_app(
    name = "erlang_app",
    srcs = [":all_srcs"],
    hdrs = [":public_hdrs"],
    app_name = "seshat",
    beam_files = [":beam_files"],
    extra_apps = [
        "crypto",
        "sasl",
    ],
    license_files = [":license_files"],
    priv = [":priv"],
)

alias(
    name = "seshat",
    actual = ":erlang_app",
    visibility = ["//visibility:public"],
)

test_erlang_app(
    name = "test_erlang_app",
    srcs = [":all_srcs"],
    hdrs = [":public_and_private_hdrs"],
    app_name = "seshat",
    beam_files = [":test_beam_files"],
    extra_apps = [
        "crypto",
        "sasl",
    ],
    license_files = [":license_files"],
    priv = [":priv"],
)

xref(
    name = "xref",
    target = ":erlang_app",
)

plt(
    name = "deps_plt",
    for_target = ":erlang_app",
    plt = "//:base_plt",
)

dialyze(
    name = "dialyze",
    plt = ":deps_plt",
    target = ":erlang_app",
)

eunit(
    name = "eunit",
    compiled_suites = [
        ":test_seshat_counters_server_test_beam",
        ":test_seshat_test_beam",
    ],
    target = ":test_erlang_app",
)

assert_suites2()
