load("@rules_erlang//:erlang_bytecode2.bzl", "erlc_opts")
load("@rules_erlang//:erlang_app.bzl", "erlang_app", "test_erlang_app")
load("@rules_erlang//:xref2.bzl", "xref")
load("@rules_erlang//:dialyze.bzl", "dialyze", "plt")
load("@rules_erlang//:eunit2.bzl", "eunit")
load("@rules_erlang//:ct.bzl", "assert_suites2", "ct_test")
load(":app.bzl", "all_beam_files", "all_srcs", "all_test_beam_files", "test_suite_beam_files")

# gazelle:erlang_generate_beam_files_macro

erlc_opts(
    name = "erlc_opts",
    values = select({
        "@rules_erlang//:debug_build": [
            "+debug_info",
        ],
        "//conditions:default": [
            "+debug_info",
            "+deterministic",
        ],
    }),
    visibility = [":__subpackages__"],
)

erlc_opts(
    name = "test_erlc_opts",
    values = select({
        "@rules_erlang//:debug_build": [
            "+debug_info",
            "-DTEST=1",
        ],
        "//conditions:default": [
            "+debug_info",
            "+deterministic",
            "-DTEST=1",
        ],
    }),
    visibility = [":__subpackages__"],
)

plt(
    name = "base_plt",
    visibility = [":__subpackages__"],
)

all_srcs(name = "all_srcs")

all_beam_files(name = "all_beam_files")

all_test_beam_files(name = "all_test_beam_files")

test_suite_beam_files(name = "test_suite_beam_files")

erlang_app(
    name = "erlang_app",
    srcs = [":all_srcs"],
    hdrs = [":public_hdrs"],
    app_name = "rebar_with_ct_suites",
    beam_files = [":beam_files"],
    license_files = [":license_files"],
    priv = [":priv"],
)

alias(
    name = "rebar_with_ct_suites",
    actual = ":erlang_app",
    visibility = ["//visibility:public"],
)

test_erlang_app(
    name = "test_erlang_app",
    srcs = [":all_srcs"],
    hdrs = [":public_and_private_hdrs"],
    app_name = "rebar_with_ct_suites",
    beam_files = [":test_beam_files"],
    license_files = [":license_files"],
    priv = [":priv"],
)

xref(
    name = "xref",
    target = ":erlang_app",
)

plt(
    name = "deps_plt",
    for_target = ":erlang_app",
    plt = "//:base_plt",
)

dialyze(
    name = "dialyze",
    plt = ":deps_plt",
    target = ":erlang_app",
)

eunit(
    name = "eunit",
    target = ":test_erlang_app",
)

ct_test(
    name = "osiris_SUITE",
    app_name = "rebar_with_ct_suites",
    compiled_suites = [":osiris_SUITE_beam_files"],
    data = glob(["test/osiris_SUITE_data/**/*"]),
    deps = [":test_erlang_app"],
)

ct_test(
    name = "osiris_log_SUITE",
    app_name = "rebar_with_ct_suites",
    compiled_suites = [":osiris_log_SUITE_beam_files"],
    data = glob(["test/osiris_log_SUITE_data/**/*"]),
    deps = [":test_erlang_app"],
)

ct_test(
    name = "osiris_tracking_SUITE",
    app_name = "rebar_with_ct_suites",
    compiled_suites = [":osiris_tracking_SUITE_beam_files"],
    data = glob(["test/osiris_tracking_SUITE_data/**/*"]),
    deps = [":test_erlang_app"],
)

ct_test(
    name = "osiris_util_SUITE",
    app_name = "rebar_with_ct_suites",
    compiled_suites = [":osiris_util_SUITE_beam_files"],
    data = glob(["test/osiris_util_SUITE_data/**/*"]),
    deps = [":test_erlang_app"],
)

assert_suites2()
