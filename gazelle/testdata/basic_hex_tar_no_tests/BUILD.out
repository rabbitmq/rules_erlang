load("@rules_erlang//:erlang_bytecode2.bzl", "erlang_bytecode", "erlc_opts")
load("@rules_erlang//:erlang_app.bzl", "erlang_app")
load("@rules_erlang//:untar.bzl", "untar")

# gazelle:erlang_no_tests

untar(
    name = "contents",
    outs = [
        "LICENSE",
        "LICENSE-APACHE2",
        "LICENSE-MPL-RabbitMQ",
        "README.md",
        "rebar.config",
        "rebar.lock",
        "src/aten.app.src",
        "src/aten.erl",
        "src/aten_app.erl",
        "src/aten_detect.erl",
        "src/aten_detector.erl",
        "src/aten_emitter.erl",
        "src/aten_sink.erl",
        "src/aten_sup.erl",
    ],
    archive = "contents.tar.gz",
)

erlc_opts(
    name = "erlc_opts",
    values = select({
        "@rules_erlang//:debug_build": [
            "+debug_info",
        ],
        "//conditions:default": [
            "+debug_info",
            "+deterministic",
        ],
    }),
    visibility = [":__subpackages__"],
)

erlang_bytecode(
    name = "ebin_aten_beam",
    srcs = ["src/aten.erl"],
    outs = ["ebin/aten.beam"],
    app_name = "aten",
    erlc_opts = "//:erlc_opts",
)

erlang_bytecode(
    name = "ebin_aten_app_beam",
    srcs = ["src/aten_app.erl"],
    outs = ["ebin/aten_app.beam"],
    app_name = "aten",
    erlc_opts = "//:erlc_opts",
)

erlang_bytecode(
    name = "ebin_aten_detect_beam",
    srcs = ["src/aten_detect.erl"],
    outs = ["ebin/aten_detect.beam"],
    app_name = "aten",
    erlc_opts = "//:erlc_opts",
)

erlang_bytecode(
    name = "ebin_aten_detector_beam",
    srcs = ["src/aten_detector.erl"],
    outs = ["ebin/aten_detector.beam"],
    app_name = "aten",
    erlc_opts = "//:erlc_opts",
)

erlang_bytecode(
    name = "ebin_aten_emitter_beam",
    srcs = ["src/aten_emitter.erl"],
    outs = ["ebin/aten_emitter.beam"],
    app_name = "aten",
    erlc_opts = "//:erlc_opts",
)

erlang_bytecode(
    name = "ebin_aten_sink_beam",
    srcs = ["src/aten_sink.erl"],
    outs = ["ebin/aten_sink.beam"],
    app_name = "aten",
    erlc_opts = "//:erlc_opts",
)

erlang_bytecode(
    name = "ebin_aten_sup_beam",
    srcs = ["src/aten_sup.erl"],
    outs = ["ebin/aten_sup.beam"],
    app_name = "aten",
    erlc_opts = "//:erlc_opts",
)

filegroup(
    name = "beam_files",
    srcs = [
        "ebin/aten.beam",
        "ebin/aten_app.beam",
        "ebin/aten_detect.beam",
        "ebin/aten_detector.beam",
        "ebin/aten_emitter.beam",
        "ebin/aten_sink.beam",
        "ebin/aten_sup.beam",
    ],
)

filegroup(
    name = "srcs",
    srcs = [
        "src/aten.app.src",
        "src/aten.erl",
        "src/aten_app.erl",
        "src/aten_detect.erl",
        "src/aten_detector.erl",
        "src/aten_emitter.erl",
        "src/aten_sink.erl",
        "src/aten_sup.erl",
    ],
)

filegroup(
    name = "private_hdrs",
    srcs = [],
)

filegroup(
    name = "public_hdrs",
    srcs = [],
)

filegroup(
    name = "priv",
    srcs = [],
)

filegroup(
    name = "licenses",
    srcs = [
        "LICENSE",
        "LICENSE-APACHE2",
        "LICENSE-MPL-RabbitMQ",
    ],
)

filegroup(
    name = "public_and_private_hdrs",
    srcs = [
        ":private_hdrs",
        ":public_hdrs",
    ],
)

filegroup(
    name = "all_srcs",
    srcs = [
        ":public_and_private_hdrs",
        ":srcs",
    ],
)

erlang_app(
    name = "erlang_app",
    srcs = [":all_srcs"],
    app_description = "Erlang node failure detector",
    app_name = "aten",
    app_version = "0.5.8",
    beam_files = [":beam_files"],
    extra_license_files = [
        "LICENSE",
        "LICENSE-APACHE2",
        "LICENSE-MPL-RabbitMQ",
    ],
)

alias(
    name = "aten",
    actual = ":erlang_app",
    visibility = ["//visibility:public"],
)
